What is software?

core message:
A piece of Software is neither a building, nor a machine, but a living thing that needs to survive, and adapt, in a fast changing environment. 
This means that you are not a construction worker, it means you are it's parent. You are responsible for shaping it to ensure it's survival.
Ensure that your software can be easily changed by you or others to ensure it's survival.



1. eiffel tower
  - how built it?
  Gustav Eiffel
  - engineers
  Emile and Maurice
  - architect
  Stephen Sauvestre
  - World exposition 
  charles garnier
  300 construction workers
  -facebook
  you are not just construction workers

  finished? march 1889
  thefacebook.com 2004

  PCB, GPU, CPU, transistors, and most of all FPGA's and PLC's
  field programmable gate array
  logic gates
  
  - electronics can literely do anything software can,
 
  
  

--------------------------
Did anybody here ever tried to explain what software is to a noob?
Who here  tried to compare software to buildings? or machines? books perhaps? art?
The insight that I am about to share with you, will change the way you look at software.
This talk will save your product from eternal damnation.

Ok, lets start with the building analogy. The eiffeltower is a building that can be classified as a success right?
So who build the eiffel tower? Gustave Eiffel right? 

Wrong. Gustave Eiffel initially saw the design that was made by two of his engineers, Maurice Koechlin and Ã‰mile Nouguier, but was only marginally interested.
It was only after Stephen Sauvestre, the head of Eiffel's architectural department, added some stuff to the design, that Eiffel was interested.
He bought the rights from the two engineers, that is all.

So did the two engineers or the architect build the eiffel tower? No, all they did was putting the idea on paper.

After Eiffel bought the designs he displayed them on various engineering and design conferences, but it took many years before the French Minister of Trade invested
in the eiffel tower. The french governement paid for more than a quarter of the Eiffel tower, the rest was paid by Eiffel.
The project was then lead by an architect named Charles Garnier, with a number of important architects on his side. 

So did Charles Garnier built the Eiffel tower? No, he drew a lot of plans and had a number of other famous architects to finish those plans.
The internet tells us that about 300 people were directly employed to construc the eiffel tower, however that number is excluding third parties that were 
contracted for materials or specific jobs.

Those 300+ men built the eiffel tower.

However they needed complete organisation with various architects to built it.
The construction workers simply followed the orders given to them, only solving small issues without bother an architect.
The architects never ever held any tools in their hands. 

Compare this to a piece of software like Facebook.
Did mark zuckerburg make Facebook?
Yes he did, There is evidence he still checked in code in 2010. 

Did he have help? Yes, he did. But those guys were not 'construction workers', they were equally skilled programmers.
Mark Zuckerburg his personal skills, business skills, and the fact that he started the project makes him the primary creator.

So is software compareable buildings, no it is not.

Let me share with you one of the insights this gave me.

If software is not a building, that means that you are not architects, nor construction workers. 
Yes there are some that are better at keeping an overview of the
product as a whole. But each developer is responsible for a small piece of the architecture as a whole.
You are both the architect and the construction worker. 
You can, no you must, think about what your choices mean for the architecture as a whole. 
Not just weld togheter steel beams.
You can improve the design and make your product 'pretty'.
Not just paint it in the colors someone told you.
You are not just a construction worker, you are the architect.

Does anybody know when the eiffel tower was done?

The eiffel tower finished construction 15 March 1889 ... and then it was Done.

When did facebook finish construction?

February 2004 Mark Zuckerburg launched thefacebook.com, is it done? No, it will never be done. 
Because software is not a building.
Your software will not be 'finished', it will keep growing, but most importantly it will keep changing.

We will come back to that later. First let's discuss the comparison to electronics.
I am not talking about your iPhone because that contains mostly software. 
No I am talking about old transitor radio's, I am talking about old calculators,
about PCB's and PLC's
about CPU's and  GPU's
I am talking about things like FPGA's

Explain FPGA

Now CPU's, GPU's and FPGA's are very much comparable to software right? 
They perform complex tasks, are constanlty redesigned, etc. etc.

Is software a electronical device?
 hell software can't even run without electronics.
  And faster too, a state of the art FPGA programmed properly
  is faster than any software that performs the same task.
  The parallella boards have and FPGA-based GPU by the way, which according to their blogs was
  one of the main things they underestimated, and one of the many causes for their enormous delay in delivery.

  Now I have never programmed FPGA's or devices alike, but I have been told that it is
  not a simple task. Effectively your program will be converted into a large boolean expression
  so a lot of AND's and OR's and NOT's. which is then written onto the FPGA.
  and when you turn on your hardware you hope it does not start smoking.
  Which is where the term 'smoke test' originates from by the way.
  
  But software is not electronics.
  And you know why?
  beceuse Software is easily changed.
  Your iphone can update it's operating system but it does not update the hardware.
  Altough FPGA's are perhaps faster, they are not easily created nor changed.
  And it is not just that it CAN change, it must change.
  
  Why does Mark Zuckerburg keep changing facebook?
  He changes not just to improve it but because the environment it lives in changes.
  What started as a university only website, is now on your phone, there like buttons,
  Withlocals has machine which sole task is to display the current number of likes.

  Let me tell you what software is
  Software is a living thing, that is constantly improving and evolving to survive in a changing environment.
  And as such we are not it's creators, nor are why it's parents, we are the gods that look down and shape it.
  It does not matter whether you are lead developer or designer or front end or backend.
  each of us can crucially influence the chances of it's survival.
  
  And sometimes you realize you accidentally taught it to do the wrong things,
  now the good thing about software is that you can simply remove parts of it.
  Sometimes it is necessary for survival to let parts go, like salamanders loose their tale,
  or why some fish have chosen to evolve and live on land.
  
  So if software is an organism, than do we know any software that was a dinosaur?
  Does anybody remember OS2/Warp? Nope, well there you have it. 
  Who here still uses Windows 95/98? or windows XP?
  When software can no longer effectively change it dies, 
  and hopefully your company has either started fresh or it dies with the software.
  When nobody can understand the code no more, it is effectively frozen and can no longer change.
  When your software is heavy with features that nobody needs, when it does the wrong things, 
  or does the right things badly. It will not survive.
  when in doubt you should make software that is easily changed.
  write Unit test to ensure features work, and keep working when you are changing things. 
  write short functions with clear names that people can easily understand and change.
  throw away things that nobody uses, let your software evolve.
-----
  So what is software?
  Software is software, what matters is who makes it.  
  In the world of software each one of you is a god.
  So make software that can survive in a fast changing world

------  
  So to conclude; my message is this:
  In the world of software each one of you is a god, and responsible for the survival of both your software and the company that relies on it.
  Make software than can be changed. Write code that other can understand, keep it simple.
  Throw away things that don't work, and start over. 
  
  
  
   
  
   
  
